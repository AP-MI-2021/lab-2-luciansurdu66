Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>def Eratostene(n):\r\n    '''\r\n    determină Ciurul lui Eratostene\r\n    :param n: nr. întreg\r\n    :return: numerele prime cu ajutorul Ciurului lui Eratostene\r\n    '''\r\n    primes = list(range (2,n+1))\r\n    for i in primes:\r\n        j=2\r\n        while i*j <= primes[-1]:\r\n            if i*j in primes:\r\n                primes.remove(i*j)\r\n            j+=1\r\n        return primes\r\ndef odd_primes(N):\r\n    '''\r\n\r\n    :param N:\r\n    :return:\r\n    '''\r\n    oddprimes = Eratostene(N)\r\n    oddprimes.remove(2)\r\n    return(oddprimes)\r\n\r\ndef get_goldbach(n):\r\n    x,y = 0, 0\r\n    rezultat = 0\r\n    if n%2 == 0:\r\n        prime = odd_primes(n)\r\n        while rezultat !=n:\r\n            for i in range(len(prime)):\r\n                if rezultat == n: break\r\n                x=prime[i]\r\n                for j in range(len(prime)):\r\n                    y=prime[j]\r\n                    rezultat = x+y\r\n                    if rezultat == n: break\r\n    return x,y\r\ndef test_get_goldbach()\r\n\r\nif __name__ == \"__main__\":\r\n    n =int(input(\"Dati un numar\"))\r\n    p1,p2 = get_goldbach(n)\r\n    print(p1,p2)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision 963e0ca2ed06ea8defd3158509534ea41f8c139c)
+++ b/main.py	(date 1633426983601)
@@ -10,7 +10,7 @@
         while i*j <= primes[-1]:
             if i*j in primes:
                 primes.remove(i*j)
-            j+=1
+            j=j+1
         return primes
 def odd_primes(N):
     '''
@@ -23,6 +23,11 @@
     return(oddprimes)
 
 def get_goldbach(n):
+    '''
+    verifica conjectura lui Goldbach
+    :param n: nr. intreg
+    :return:cel mai mic si cel mai mare numar prim a caror suma este egala cu n
+    '''
     x,y = 0, 0
     rezultat = 0
     if n%2 == 0:
@@ -36,9 +41,36 @@
                     rezultat = x+y
                     if rezultat == n: break
     return x,y
-def test_get_goldbach()
-
-if __name__ == "__main__":
-    n =int(input("Dati un numar"))
-    p1,p2 = get_goldbach(n)
-    print(p1,p2)
+def get_newton_sqrt(n,steps):
+    """
+    Calculeaza rădăcina pătrată
+    :param n: nr real
+    :param steps: nr intreg
+    :return: rădăcina numărului
+    """
+    x= float(n)
+    for i in range(steps):
+        n = 0.5 * (n + x / n)
+    return n
+def test_get_newton_sqrt():
+    assert get_newton_sqrt(81,8) == 9.0
+    assert get_newton_sqrt(5,6) == 2.23606797749979
+shouldRun = True
+while shouldRun:
+    print("1. Determină numerele prime p1 și p2 astfel astfel încât n=p1+p2, p1 minim și p2 maxim")
+    print("2. Determinati daca un nr. este prim")
+    print("x. Iesire")
+    optiune = input("Dati opțiunea: ")
+    if optiune == "1":
+        n= int(input('Dați un număr par >2 : '))
+        p1, p2 = get_goldbach(n)
+        print(p1,p2)
+    elif optiune == "2":
+        test_get_newton_sqrt()
+        x = int(input("Dați un nr."))
+        steps = int(input("Dați un număr de pași: "))
+        print("Rădăcina numărului este: ",get_newton_sqrt(x,steps))
+    elif optiune == "x":
+        shouldRun = False
+    else:
+        print("Opțiune greșită! Reincercați!")
